// Core development modes
tasks.register('dev') {
    group = 'abet-dev'
    description = 'Run backend only for local development'
    dependsOn 'bootRun'
    doFirst {
        project.setProperty('skipFrontend', 'true')
        println "Backend: http://localhost:8080"
        println "Start frontend separately: cd frontend && npm run dev"
    }
}

tasks.register('devWithFrontendBuild') {
    group = 'abet-dev'
    description = 'Run with built frontend locally'
    dependsOn 'bootRun'
    doFirst {
        println "Full app: http://localhost:8080"
    }
}

// Unified Docker development tasks
tasks.register('devDocker') {
    group = 'abet-dev'
    description = 'Run in Docker with H2 database'
    dependsOn 'composeBuild'
    doLast {
        exec {
            executable 'docker'
            args 'compose', '-f', 'docker-compose.deployment-testing.yml', 'up', '-d'
        }
        println "Docker app: http://localhost:8080"
        println "Stop with: ./gradlew stopDocker -Pcompose=deployment-testing"
    }
}

tasks.register('devDockerProd') {
    group = 'abet-dev'
    description = 'Run in Docker with MariaDB (production-like)'
    dependsOn 'composeBuild'
    doLast {
        exec {
            executable 'docker'
            args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'up', '-d'
        }
        println "Docker app: http://localhost:8080"
        println "Adminer: http://localhost:8081"
        println "Stop with: ./gradlew stopDocker -Pcompose=prod-testing"
    }
}

// Docker control tasks
tasks.register('stopDocker', Exec) {
    group = 'abet-dev'
    description = 'Stop Docker environment (use -Pcompose=<env>)'
    doFirst {
        def composeEnv = project.findProperty('compose') ?: 'deployment-testing'
        if (composeEnv == 'prod-testing') {
            args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'down'
        } else {
            args 'compose', '-f', "docker-compose.${composeEnv}.yml", 'down'
        }
    }
    executable 'docker'
}

tasks.register('logsDocker', Exec) {
    group = 'abet-dev'
    description = 'Follow Docker logs (use -Pcompose=<env>)'
    doFirst {
        def composeEnv = project.findProperty('compose') ?: 'deployment-testing'
        if (composeEnv == 'prod-testing') {
            args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'logs', '-f'
        } else {
            args 'compose', '-f', "docker-compose.${composeEnv}.yml", 'logs', '-f'
        }
    }
    executable 'docker'
}

// Keep only essential Docker Compose tasks
tasks.register('composeBuild', Exec) {
    description = 'Build Docker images'
    executable 'docker'
    args 'compose', 'build'
}