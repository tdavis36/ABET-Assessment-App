plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'com.github.node-gradle.node' version '7.0.1'
}

version = '0.0.31-dev'
group = 'com.abetappteam.abetapp'

// Java version configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'        // REST API
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'   // Database access
    implementation 'org.springframework.boot:spring-boot-starter-validation' // Request validation
    implementation 'org.springframework.boot:spring-boot-starter-actuator'   // Health checks

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // Database driver
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

// Configure bootRun for development
bootRun {
    // Default to dev profile for local development
    args = ['--spring.profiles.active=dev']

    // Allow overriding with system property
    if (System.getProperty('spring.profiles.active')) {
        args = ["--spring.profiles.active=${System.getProperty('spring.profiles.active')}"]
    }

    // JVM arguments for development
    jvmArgs = [
            '-Dspring.devtools.restart.enabled=true',
            '-Dspring.devtools.livereload.enabled=true'
    ]
}

def skipFrontend = project.hasProperty('skipFrontend') && project.property('skipFrontend') == 'true'

node {
    version = '20.19.0'
    npmVersion = '11.6.0'
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

def npmExecutable = System.getProperty('os.name').toLowerCase().contains('windows') ? 'npm.cmd' : 'npm'

tasks.register('installFrontendDeps', Exec) {
    workingDir 'frontend'
    onlyIf { !skipFrontend }
    executable npmExecutable
    args 'ci'
    inputs.file('frontend/package-lock.json')
    outputs.dir('frontend/node_modules')
}

tasks.register('testFrontend', Exec) {
    dependsOn tasks.installFrontendDeps
    workingDir 'frontend'
    executable npmExecutable
    args 'run', 'test:unit'
    onlyIf { !skipFrontend }
}

tasks.register('buildFrontend', Exec) {
    dependsOn tasks.installFrontendDeps
    workingDir 'frontend'
    executable npmExecutable
    args 'run', 'build'
    inputs.files(fileTree("frontend/src"))
    inputs.file("frontend/package.json")
    outputs.dir("frontend/dist")
    onlyIf { !skipFrontend }
}

tasks.register('copyFrontend', Copy) {
    dependsOn tasks.buildFrontend
    from "frontend/dist"
    into "src/main/resources/static"
    onlyIf { !skipFrontend }
}

// Configure main tasks
tasks.named('test') {
    group = 'abet-dev'
    if (!skipFrontend) {
        dependsOn tasks.testFrontend
    }
}

tasks.named('processResources') {
    if (!skipFrontend) {
        dependsOn tasks.copyFrontend
    }
}

// Development tasks
tasks.register('dev') {
    group = 'abet-dev'
    description = 'Run for local development'
    dependsOn 'bootRun'
    doFirst {
        println "Frontend: http://localhost:5173"
        println "Backend: http://localhost:8080"
    }
}

tasks.register('devFrontend', Exec) {
    group = 'abet-dev'
    dependsOn tasks.installFrontendDeps
    workingDir 'frontend'
    executable npmExecutable
    args 'run', 'dev'
    inputs.files(fileTree("frontend/src"))
    inputs.file("frontend/package.json")
    outputs.dir("frontend/dist")
    onlyIf { !skipFrontend }
}

tasks.register('devWithBuiltInFrontend') {
    group = 'abet-dev'
    description = 'Run with built frontend locally'
    dependsOn 'bootRun'
    doFirst {
        println "Full app: http://localhost:8080"
    }
}

// Docker development tasks
tasks.register('devDocker', Exec) {
    group = 'abet-dev'
    description = 'Run in Docker with H2 database'
    dependsOn 'composeBuild'
    executable 'docker'
    args 'compose', '-f', 'docker-compose.deployment-testing.yml', 'up', '-d'
    doFirst {
        println "Docker app: http://localhost:8080"
        println "Stop with: ./gradlew stopDocker -Pcompose=deployment-testing"
    }
}

tasks.register('devDockerProd', Exec) {
    group = 'abet-dev'
    description = 'Run in Docker with MariaDB (production-like)'
    dependsOn 'composeBuild'
    executable 'docker'
    args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'up', '-d'
    doFirst {
        println "Docker app: http://localhost:8080"
        println "Adminer: http://localhost:8081"
        println "Stop with: ./gradlew stopDocker -Pcompose=prod-testing"
    }
}

// Docker tasks
tasks.register('dockerStop', Exec) {
    group = 'abet-dev'
    description = 'Stop Docker environment (use -Pcompose=<env>)'
    doFirst {
        def composeEnv = project.findProperty('compose') ?: 'deployment-testing'
        if (composeEnv == 'prod-testing') {
            args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'down'
        } else {
            args 'compose', '-f', "docker-compose.${composeEnv}.yml", 'down'
        }
    }
    executable 'docker'
}

tasks.register('dockerLogs', Exec) {
    group = 'abet-dev'
    description = 'Follow Docker logs (use -Pcompose=<env>)'
    doFirst {
        def composeEnv = project.findProperty('compose') ?: 'deployment-testing'
        if (composeEnv == 'prod-testing') {
            args 'compose', '-f', 'docker-compose.yml', '-f', 'docker-compose.prod-testing.yml', 'logs', '-f'
        } else {
            args 'compose', '-f', "docker-compose.${composeEnv}.yml", 'logs', '-f'
        }
    }
    executable 'docker'
}

// Keep only essential Docker Compose tasks
tasks.register('composeBuild', Exec) {
    description = 'Build Docker images'
    executable 'docker'
    args 'compose', 'build'
}